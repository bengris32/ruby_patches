From d9a9a1a0ad47f06b856e6d68fc8cb255493cddc9 Mon Sep 17 00:00:00 2001
From: Shrikara B <shrikara@codeaurora.org>
Date: Fri, 1 Oct 2021 11:24:48 +0530
Subject: [PATCH 4/9] codec2: Use numClientBuffers to control the pipeline

Implement numClientBuffers in CCodecBuffers which will be used
to control the number of buffers given to client when the pipeline
is almost full.

CRs-Fixed: 3049206
Change-Id: Ib9627538b1fe943e2e70c853749089dc79ccb2c1
---
 media/codec2/sfplugin/CCodecBufferChannel.cpp |  6 ++++
 media/codec2/sfplugin/CCodecBuffers.cpp       | 36 +++++++++++++++++++
 media/codec2/sfplugin/CCodecBuffers.h         | 29 +++++++++++++++
 3 files changed, 71 insertions(+)

diff --git a/media/codec2/sfplugin/CCodecBufferChannel.cpp b/media/codec2/sfplugin/CCodecBufferChannel.cpp
index db939b2..c0a3cc4 100644
--- a/media/codec2/sfplugin/CCodecBufferChannel.cpp
+++ b/media/codec2/sfplugin/CCodecBufferChannel.cpp
@@ -734,6 +734,12 @@ void CCodecBufferChannel::feedInputBufferIfAvailableInternal() {
             if (numActiveSlots >= input->numSlots) {
                 break;
             }
+            if (pipelineRoom <= input->buffers->numClientBuffers()) {
+                ALOGI("pipelineRoom(%zu) is <= numClientBuffers(%zu). "
+                    "Not signalling any more buffers to client",
+                    pipelineRoom, input->buffers->numClientBuffers());
+                break;
+            }
             if (!input->buffers->requestNewBuffer(&index, &inBuffer)) {
                 ALOGV("[%s] no new buffer available", mName);
                 break;
diff --git a/media/codec2/sfplugin/CCodecBuffers.cpp b/media/codec2/sfplugin/CCodecBuffers.cpp
index 0f4a8d8..d97cb4f 100644
--- a/media/codec2/sfplugin/CCodecBuffers.cpp
+++ b/media/codec2/sfplugin/CCodecBuffers.cpp
@@ -564,6 +564,14 @@ size_t FlexBuffersImpl::numComponentBuffers() const {
             });
 }
 
+size_t FlexBuffersImpl::numClientBuffers() const {
+    return std::count_if(
+            mBuffers.begin(), mBuffers.end(),
+            [](const Entry &entry) {
+                return entry.clientBuffer != nullptr;
+            });
+}
+
 // BuffersArrayImpl
 
 void BuffersArrayImpl::initialize(
@@ -710,6 +718,14 @@ size_t BuffersArrayImpl::arraySize() const {
     return mBuffers.size();
 }
 
+size_t BuffersArrayImpl::numClientBuffers() const {
+    return std::count_if(
+            mBuffers.begin(), mBuffers.end(),
+            [](const Entry &entry) {
+                return entry.ownedByClient;
+            });
+}
+
 // InputBuffersArray
 
 void InputBuffersArray::initialize(
@@ -756,6 +772,10 @@ size_t InputBuffersArray::numActiveSlots() const {
     return mImpl.numActiveSlots();
 }
 
+size_t InputBuffersArray::numClientBuffers() const {
+    return mImpl.numClientBuffers();
+}
+
 sp<Codec2Buffer> InputBuffersArray::createNewBuffer() {
     return mAllocate();
 }
@@ -794,6 +814,10 @@ size_t SlotInputBuffers::numActiveSlots() const {
     return mImpl.numActiveSlots();
 }
 
+size_t SlotInputBuffers::numClientBuffers() const {
+    return mImpl.numClientBuffers();
+}
+
 sp<Codec2Buffer> SlotInputBuffers::createNewBuffer() {
     return new DummyContainerBuffer{mFormat, nullptr};
 }
@@ -846,6 +870,10 @@ size_t LinearInputBuffers::numActiveSlots() const {
     return mImpl.numActiveSlots();
 }
 
+size_t LinearInputBuffers::numClientBuffers() const {
+    return mImpl.numClientBuffers();
+}
+
 // static
 sp<Codec2Buffer> LinearInputBuffers::Alloc(
         const std::shared_ptr<C2BlockPool> &pool, const sp<AMessage> &format) {
@@ -1028,6 +1056,10 @@ size_t GraphicMetadataInputBuffers::numActiveSlots() const {
     return mImpl.numActiveSlots();
 }
 
+size_t GraphicMetadataInputBuffers::numClientBuffers() const {
+    return mImpl.numClientBuffers();
+}
+
 sp<Codec2Buffer> GraphicMetadataInputBuffers::createNewBuffer() {
     std::shared_ptr<C2Allocator> alloc;
     c2_status_t err = mStore->fetchAllocator(mPool->getAllocatorId(), &alloc);
@@ -1107,6 +1139,10 @@ size_t GraphicInputBuffers::numActiveSlots() const {
     return mImpl.numActiveSlots();
 }
 
+size_t GraphicInputBuffers::numClientBuffers() const {
+    return mImpl.numClientBuffers();
+}
+
 sp<Codec2Buffer> GraphicInputBuffers::createNewBuffer() {
     C2MemoryUsage usage = { C2MemoryUsage::CPU_READ, C2MemoryUsage::CPU_WRITE };
     return AllocateInputGraphicBuffer(
diff --git a/media/codec2/sfplugin/CCodecBuffers.h b/media/codec2/sfplugin/CCodecBuffers.h
index c8e9930..6d1f320 100644
--- a/media/codec2/sfplugin/CCodecBuffers.h
+++ b/media/codec2/sfplugin/CCodecBuffers.h
@@ -151,6 +151,11 @@ public:
      */
     sp<Codec2Buffer> cloneAndReleaseBuffer(const sp<MediaCodecBuffer> &buffer);
 
+    /**
+     * Return number of buffers are given to client but have not yet queued back.
+     */
+    virtual size_t numClientBuffers() const = 0;
+
 protected:
     virtual sp<Codec2Buffer> createNewBuffer() = 0;
 
@@ -600,6 +605,11 @@ public:
      */
     size_t numActiveSlots() const;
 
+    /**
+     * Return number of buffers are given to client but have not yet queued back.
+     */
+    size_t numClientBuffers() const;
+
     /**
      * Return the number of buffers that are sent to the component but not
      * returned back yet.
@@ -726,6 +736,11 @@ public:
      */
     size_t arraySize() const;
 
+    /**
+     * Return number of buffers are given to client but have not yet queued back.
+     */
+    size_t numClientBuffers() const;
+
 private:
     std::string mImplName; ///< name for debugging
     const char *mName; ///< C-string version of name
@@ -781,6 +796,8 @@ public:
 
     size_t numActiveSlots() const final;
 
+    size_t numClientBuffers() const final;
+
 protected:
     sp<Codec2Buffer> createNewBuffer() override;
 
@@ -812,6 +829,8 @@ public:
 
     size_t numActiveSlots() const final;
 
+    size_t numClientBuffers() const final;
+
 protected:
     sp<Codec2Buffer> createNewBuffer() final;
 
@@ -842,6 +861,8 @@ public:
 
     size_t numActiveSlots() const final;
 
+    size_t numClientBuffers() const final;
+
 protected:
     sp<Codec2Buffer> createNewBuffer() override;
 
@@ -910,6 +931,8 @@ public:
 
     size_t numActiveSlots() const final;
 
+    size_t numClientBuffers() const final;
+
 protected:
     sp<Codec2Buffer> createNewBuffer() override;
 
@@ -940,6 +963,8 @@ public:
 
     size_t numActiveSlots() const final;
 
+    size_t numClientBuffers() const final;
+
 protected:
     sp<Codec2Buffer> createNewBuffer() override;
 
@@ -983,6 +1008,10 @@ public:
         return 0u;
     }
 
+    size_t numClientBuffers() const final {
+        return 0u;
+    }
+
 protected:
     sp<Codec2Buffer> createNewBuffer() override {
         return nullptr;
-- 
2.34.1


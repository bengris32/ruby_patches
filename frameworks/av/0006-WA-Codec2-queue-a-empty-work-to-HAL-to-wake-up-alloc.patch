From cad56b49fa19141249d1e7eb0d58a0d3917d94ec Mon Sep 17 00:00:00 2001
From: Jiajia Cong <jcong@codeaurora.org>
Date: Fri, 29 Jan 2021 18:44:18 +0800
Subject: [PATCH 6/9] [WA] Codec2: queue a empty work to HAL to wake up
 allocation thread

notify HAL that app resumed to foreground. HAL may need to do some
specific things

CRs-Fixed: 2880430

Change-Id: I35c6e046fe24816cb9304c4f25f404bf32a9b23f
---
 media/codec2/sfplugin/CCodecBufferChannel.cpp | 49 +++++++++++++++++++
 media/codec2/sfplugin/CCodecBufferChannel.h   |  5 ++
 2 files changed, 54 insertions(+)

diff --git a/media/codec2/sfplugin/CCodecBufferChannel.cpp b/media/codec2/sfplugin/CCodecBufferChannel.cpp
index a0fae4a..b9fa742 100644
--- a/media/codec2/sfplugin/CCodecBufferChannel.cpp
+++ b/media/codec2/sfplugin/CCodecBufferChannel.cpp
@@ -25,6 +25,7 @@
 #include <atomic>
 #include <list>
 #include <numeric>
+#include <regex>
 
 #include <C2AllocatorGralloc.h>
 #include <C2PlatformSupport.h>
@@ -80,6 +81,10 @@ constexpr size_t kRenderingDepth = 3;
 // This is for keeping IGBP's buffer dropping logic in legacy mode other
 // than making it non-blocking. Do not change this value.
 const static size_t kDequeueTimeoutNs = 0;
+// If app goes into background, decoding paused. we have WA logic in HAL to sleep some actions.
+// This value is to monitor if decoding is paused then we can signal a new empty work to HAL
+// after app resume to foreground to notify HAL something
+const static uint64_t kPipelinePausedTimeoutMs = 500;
 
 }  // namespace
 
@@ -149,6 +154,7 @@ CCodecBufferChannel::CCodecBufferChannel(
       mFirstValidFrameIndex(0u),
       mMetaMode(MODE_NONE),
       mInputMetEos(false),
+      mLastInputBufferAvailableTs(0u),
       mSendEncryptedInfoBuffer(false) {
     mOutputSurface.lock()->maxDequeueBuffers = kSmoothnessFactor + kRenderingDepth;
     {
@@ -703,13 +709,38 @@ status_t CCodecBufferChannel::queueSecureInputBuffer(
     return queueInputBufferInternal(buffer, block, bufferSize);
 }
 
+void CCodecBufferChannel::queueDummyWork() {
+    std::unique_ptr<C2Work> work(new C2Work);
+    // WA: signal a empty work to HAL to trigger specific event, but totally drop the work
+    work->input.flags = C2FrameData::FLAG_DROP_FRAME;
+    std::list<std::unique_ptr<C2Work>> items;
+    items.push_back(std::move(work));
+    (void)mComponent->queue(&items);
+}
+
 void CCodecBufferChannel::feedInputBufferIfAvailable() {
     QueueGuard guard(mSync);
     if (!guard.isRunning()) {
         ALOGV("[%s] We're not running --- no input buffer reported", mName);
         return;
     }
+
     feedInputBufferIfAvailableInternal();
+
+    // limit this WA to qc hw decoder only
+    // if feedInputBufferIfAvailableInternal() successfully (has available input buffer),
+    // mLastInputBufferAvailableTs would be updated. otherwise, not input buffer available
+    std::regex pattern{"c2\\.qti\\..*\\.decoder.*"};
+    if (std::regex_match(mComponentName, pattern)) {
+        std::lock_guard<std::mutex> tsLock(mTsLock);
+        uint64_t now = std::chrono::duration_cast<std::chrono::milliseconds>(
+                PipelineWatcher::Clock::now().time_since_epoch()).count();
+        if (now - mLastInputBufferAvailableTs > kPipelinePausedTimeoutMs) {
+            ALOGV("long time elapsed since last input available, let's queue a specific work to "
+                    "HAL to notify something");
+            queueDummyWork();
+        }
+    }
 }
 
 void CCodecBufferChannel::feedInputBufferIfAvailableInternal() {
@@ -747,6 +778,13 @@ void CCodecBufferChannel::feedInputBufferIfAvailableInternal() {
                 break;
             }
         }
+
+        {
+            std::lock_guard<std::mutex> tsLock(mTsLock);
+            mLastInputBufferAvailableTs = std::chrono::duration_cast<std::chrono::milliseconds>(
+                    PipelineWatcher::Clock::now().time_since_epoch()).count();
+        }
+
         ALOGV("[%s] new input index = %zu [%p]", mName, index, inBuffer.get());
         mCallback->onInputBufferAvailable(index, inBuffer);
         if (++numInputBuffersAvailable >= pipelineRoom) {
@@ -1579,6 +1617,14 @@ status_t CCodecBufferChannel::requestInitialInputBuffers(
         clientInputBuffers.erase(minIndex);
     }
 
+    if (!clientInputBuffers.empty()) {
+        {
+            std::lock_guard<std::mutex> tsLock(mTsLock);
+            mLastInputBufferAvailableTs = std::chrono::duration_cast<std::chrono::milliseconds>(
+                    PipelineWatcher::Clock::now().time_since_epoch()).count();
+        }
+    }
+
     for (const auto &[index, buffer] : clientInputBuffers) {
         mCallback->onInputBufferAvailable(index, buffer);
     }
@@ -1745,6 +1791,9 @@ bool CCodecBufferChannel::handleWork(
 
     if (work->result == C2_OK){
         notifyClient = true;
+    } else if (work->result == C2_OMITTED) {
+        ALOGV("[%s] empty work returned; omitted.", mName);
+        return false; // omitted
     } else if (work->result == C2_NOT_FOUND) {
         ALOGD("[%s] flushed work; ignored.", mName);
     } else {
diff --git a/media/codec2/sfplugin/CCodecBufferChannel.h b/media/codec2/sfplugin/CCodecBufferChannel.h
index a52d4dc..a0317f4 100644
--- a/media/codec2/sfplugin/CCodecBufferChannel.h
+++ b/media/codec2/sfplugin/CCodecBufferChannel.h
@@ -21,6 +21,7 @@
 #include <map>
 #include <memory>
 #include <vector>
+#include <mutex>
 
 #include <C2Buffer.h>
 #include <C2Component.h>
@@ -262,6 +263,7 @@ private:
 
     void feedInputBufferIfAvailable();
     void feedInputBufferIfAvailableInternal();
+    void queueDummyWork();
     status_t queueInputBufferInternal(sp<MediaCodecBuffer> buffer,
                                       std::shared_ptr<C2LinearBlock> encryptedBlock = nullptr,
                                       size_t blockSize = 0);
@@ -339,6 +341,9 @@ private:
     std::atomic_bool mInputMetEos;
     std::once_flag mRenderWarningFlag;
 
+    uint64_t mLastInputBufferAvailableTs;
+    std::mutex mTsLock;
+
     sp<ICrypto> mCrypto;
     sp<IDescrambler> mDescrambler;
 
-- 
2.34.1

